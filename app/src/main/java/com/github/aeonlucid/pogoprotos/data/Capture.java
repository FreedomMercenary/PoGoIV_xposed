// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/github/aeonlucid/pogoprotos/data/Capture.proto

package com.github.aeonlucid.pogoprotos.data;

public final class Capture {
  private Capture() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface CaptureProbabilityOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.github.aeonlucid.pogoprotos.data.capture.CaptureProbability)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
     */
    java.util.List<com.github.aeonlucid.pogoprotos.inventory.Item.ItemId> getPokeballTypeList();
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
     */
    int getPokeballTypeCount();
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
     */
    com.github.aeonlucid.pogoprotos.inventory.Item.ItemId getPokeballType(int index);
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
     */
    java.util.List<java.lang.Integer>
    getPokeballTypeValueList();
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
     */
    int getPokeballTypeValue(int index);

    /**
     * <code>repeated float capture_probability = 2 [packed = true];</code>
     */
    java.util.List<java.lang.Float> getCaptureProbabilityList();
    /**
     * <code>repeated float capture_probability = 2 [packed = true];</code>
     */
    int getCaptureProbabilityCount();
    /**
     * <code>repeated float capture_probability = 2 [packed = true];</code>
     */
    float getCaptureProbability(int index);

    /**
     * <code>optional double reticle_difficulty_scale = 12;</code>
     */
    double getReticleDifficultyScale();
  }
  /**
   * Protobuf type {@code com.github.aeonlucid.pogoprotos.data.capture.CaptureProbability}
   */
  public  static final class CaptureProbability extends
      com.google.protobuf.GeneratedMessageLite<
          CaptureProbability, CaptureProbability.Builder> implements
      // @@protoc_insertion_point(message_implements:com.github.aeonlucid.pogoprotos.data.capture.CaptureProbability)
      CaptureProbabilityOrBuilder {
    private CaptureProbability() {
      pokeballType_ = emptyIntList();
      captureProbability_ = emptyFloatList();
    }
    private int bitField0_;
    public static final int POKEBALL_TYPE_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.IntList pokeballType_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, com.github.aeonlucid.pogoprotos.inventory.Item.ItemId> pokeballType_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, com.github.aeonlucid.pogoprotos.inventory.Item.ItemId>() {
              public com.github.aeonlucid.pogoprotos.inventory.Item.ItemId convert(java.lang.Integer from) {
                com.github.aeonlucid.pogoprotos.inventory.Item.ItemId result = com.github.aeonlucid.pogoprotos.inventory.Item.ItemId.forNumber(from);
                return result == null ? com.github.aeonlucid.pogoprotos.inventory.Item.ItemId.UNRECOGNIZED : result;
              }
            };
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
     */
    public java.util.List<com.github.aeonlucid.pogoprotos.inventory.Item.ItemId> getPokeballTypeList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, com.github.aeonlucid.pogoprotos.inventory.Item.ItemId>(pokeballType_, pokeballType_converter_);
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
     */
    public int getPokeballTypeCount() {
      return pokeballType_.size();
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
     */
    public com.github.aeonlucid.pogoprotos.inventory.Item.ItemId getPokeballType(int index) {
      return pokeballType_converter_.convert(pokeballType_.getInt(index));
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
    getPokeballTypeValueList() {
      return pokeballType_;
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
     */
    public int getPokeballTypeValue(int index) {
      return pokeballType_.getInt(index);
    }
    private int pokeballTypeMemoizedSerializedSize;
    private void ensurePokeballTypeIsMutable() {
      if (!pokeballType_.isModifiable()) {
        pokeballType_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(pokeballType_);
      }
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
     */
    private void setPokeballType(
        int index, com.github.aeonlucid.pogoprotos.inventory.Item.ItemId value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePokeballTypeIsMutable();
      pokeballType_.setInt(index, value.getNumber());
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
     */
    private void addPokeballType(com.github.aeonlucid.pogoprotos.inventory.Item.ItemId value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePokeballTypeIsMutable();
      pokeballType_.addInt(value.getNumber());
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
     */
    private void addAllPokeballType(
        java.lang.Iterable<? extends com.github.aeonlucid.pogoprotos.inventory.Item.ItemId> values) {
      ensurePokeballTypeIsMutable();
      for (com.github.aeonlucid.pogoprotos.inventory.Item.ItemId value : values) {
        pokeballType_.addInt(value.getNumber());
      }
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
     */
    private void clearPokeballType() {
      pokeballType_ = emptyIntList();
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
     */
    private void setPokeballTypeValue(
        int index, int value) {
      ensurePokeballTypeIsMutable();
      pokeballType_.setInt(index, value);
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
     */
    private void addPokeballTypeValue(int value) {
      ensurePokeballTypeIsMutable();
      pokeballType_.addInt(value);
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
     */
    private void addAllPokeballTypeValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensurePokeballTypeIsMutable();
      for (int value : values) {
        pokeballType_.addInt(value);
      }
    }

    public static final int CAPTURE_PROBABILITY_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.FloatList captureProbability_;
    /**
     * <code>repeated float capture_probability = 2 [packed = true];</code>
     */
    public java.util.List<java.lang.Float>
        getCaptureProbabilityList() {
      return captureProbability_;
    }
    /**
     * <code>repeated float capture_probability = 2 [packed = true];</code>
     */
    public int getCaptureProbabilityCount() {
      return captureProbability_.size();
    }
    /**
     * <code>repeated float capture_probability = 2 [packed = true];</code>
     */
    public float getCaptureProbability(int index) {
      return captureProbability_.getFloat(index);
    }
    private int captureProbabilityMemoizedSerializedSize = -1;
    private void ensureCaptureProbabilityIsMutable() {
      if (!captureProbability_.isModifiable()) {
        captureProbability_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(captureProbability_);
       }
    }
    /**
     * <code>repeated float capture_probability = 2 [packed = true];</code>
     */
    private void setCaptureProbability(
        int index, float value) {
      ensureCaptureProbabilityIsMutable();
      captureProbability_.setFloat(index, value);
    }
    /**
     * <code>repeated float capture_probability = 2 [packed = true];</code>
     */
    private void addCaptureProbability(float value) {
      ensureCaptureProbabilityIsMutable();
      captureProbability_.addFloat(value);
    }
    /**
     * <code>repeated float capture_probability = 2 [packed = true];</code>
     */
    private void addAllCaptureProbability(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureCaptureProbabilityIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, captureProbability_);
    }
    /**
     * <code>repeated float capture_probability = 2 [packed = true];</code>
     */
    private void clearCaptureProbability() {
      captureProbability_ = emptyFloatList();
    }

    public static final int RETICLE_DIFFICULTY_SCALE_FIELD_NUMBER = 12;
    private double reticleDifficultyScale_;
    /**
     * <code>optional double reticle_difficulty_scale = 12;</code>
     */
    public double getReticleDifficultyScale() {
      return reticleDifficultyScale_;
    }
    /**
     * <code>optional double reticle_difficulty_scale = 12;</code>
     */
    private void setReticleDifficultyScale(double value) {
      
      reticleDifficultyScale_ = value;
    }
    /**
     * <code>optional double reticle_difficulty_scale = 12;</code>
     */
    private void clearReticleDifficultyScale() {
      
      reticleDifficultyScale_ = 0D;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getPokeballTypeList().size() > 0) {
        output.writeUInt32NoTag(10);
        output.writeUInt32NoTag(pokeballTypeMemoizedSerializedSize);
      }
      for (int i = 0; i < pokeballType_.size(); i++) {
        output.writeEnumNoTag(pokeballType_.getInt(i));
      }
      if (getCaptureProbabilityList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(captureProbabilityMemoizedSerializedSize);
      }
      for (int i = 0; i < captureProbability_.size(); i++) {
        output.writeFloatNoTag(captureProbability_.getFloat(i));
      }
      if (reticleDifficultyScale_ != 0D) {
        output.writeDouble(12, reticleDifficultyScale_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < pokeballType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(pokeballType_.getInt(i));
        }
        size += dataSize;
        if (!getPokeballTypeList().isEmpty()) {  size += 1;
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(dataSize);
        }pokeballTypeMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 4 * getCaptureProbabilityList().size();
        size += dataSize;
        if (!getCaptureProbabilityList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        captureProbabilityMemoizedSerializedSize = dataSize;
      }
      if (reticleDifficultyScale_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(12, reticleDifficultyScale_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureProbability parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureProbability parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureProbability parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureProbability parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureProbability parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureProbability parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureProbability parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureProbability parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureProbability parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureProbability parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.github.aeonlucid.pogoprotos.data.Capture.CaptureProbability prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code com.github.aeonlucid.pogoprotos.data.capture.CaptureProbability}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.github.aeonlucid.pogoprotos.data.Capture.CaptureProbability, Builder> implements
        // @@protoc_insertion_point(builder_implements:com.github.aeonlucid.pogoprotos.data.capture.CaptureProbability)
        com.github.aeonlucid.pogoprotos.data.Capture.CaptureProbabilityOrBuilder {
      // Construct using com.github.aeonlucid.pogoprotos.data.Capture.CaptureProbability.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
       */
      public java.util.List<com.github.aeonlucid.pogoprotos.inventory.Item.ItemId> getPokeballTypeList() {
        return instance.getPokeballTypeList();
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
       */
      public int getPokeballTypeCount() {
        return instance.getPokeballTypeCount();
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
       */
      public com.github.aeonlucid.pogoprotos.inventory.Item.ItemId getPokeballType(int index) {
        return instance.getPokeballType(index);
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
       */
      public Builder setPokeballType(
          int index, com.github.aeonlucid.pogoprotos.inventory.Item.ItemId value) {
        copyOnWrite();
        instance.setPokeballType(index, value);
        return this;
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
       */
      public Builder addPokeballType(com.github.aeonlucid.pogoprotos.inventory.Item.ItemId value) {
        copyOnWrite();
        instance.addPokeballType(value);
        return this;
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
       */
      public Builder addAllPokeballType(
          java.lang.Iterable<? extends com.github.aeonlucid.pogoprotos.inventory.Item.ItemId> values) {
        copyOnWrite();
        instance.addAllPokeballType(values);  return this;
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
       */
      public Builder clearPokeballType() {
        copyOnWrite();
        instance.clearPokeballType();
        return this;
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
      getPokeballTypeValueList() {
        return java.util.Collections.unmodifiableList(
            instance.getPokeballTypeValueList());
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
       */
      public int getPokeballTypeValue(int index) {
        return instance.getPokeballTypeValue(index);
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
       */
      public Builder setPokeballTypeValue(
          int index, int value) {
        copyOnWrite();
        instance.setPokeballTypeValue(index, value);
        return this;
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
       */
      public Builder addPokeballTypeValue(int value) {
        instance.addPokeballTypeValue(value);
        return this;
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.inventory.item.ItemId pokeball_type = 1 [packed = true];</code>
       */
      public Builder addAllPokeballTypeValue(
          java.lang.Iterable<java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllPokeballTypeValue(values);
        return this;
      }

      /**
       * <code>repeated float capture_probability = 2 [packed = true];</code>
       */
      public java.util.List<java.lang.Float>
          getCaptureProbabilityList() {
        return java.util.Collections.unmodifiableList(
            instance.getCaptureProbabilityList());
      }
      /**
       * <code>repeated float capture_probability = 2 [packed = true];</code>
       */
      public int getCaptureProbabilityCount() {
        return instance.getCaptureProbabilityCount();
      }
      /**
       * <code>repeated float capture_probability = 2 [packed = true];</code>
       */
      public float getCaptureProbability(int index) {
        return instance.getCaptureProbability(index);
      }
      /**
       * <code>repeated float capture_probability = 2 [packed = true];</code>
       */
      public Builder setCaptureProbability(
          int index, float value) {
        copyOnWrite();
        instance.setCaptureProbability(index, value);
        return this;
      }
      /**
       * <code>repeated float capture_probability = 2 [packed = true];</code>
       */
      public Builder addCaptureProbability(float value) {
        copyOnWrite();
        instance.addCaptureProbability(value);
        return this;
      }
      /**
       * <code>repeated float capture_probability = 2 [packed = true];</code>
       */
      public Builder addAllCaptureProbability(
          java.lang.Iterable<? extends java.lang.Float> values) {
        copyOnWrite();
        instance.addAllCaptureProbability(values);
        return this;
      }
      /**
       * <code>repeated float capture_probability = 2 [packed = true];</code>
       */
      public Builder clearCaptureProbability() {
        copyOnWrite();
        instance.clearCaptureProbability();
        return this;
      }

      /**
       * <code>optional double reticle_difficulty_scale = 12;</code>
       */
      public double getReticleDifficultyScale() {
        return instance.getReticleDifficultyScale();
      }
      /**
       * <code>optional double reticle_difficulty_scale = 12;</code>
       */
      public Builder setReticleDifficultyScale(double value) {
        copyOnWrite();
        instance.setReticleDifficultyScale(value);
        return this;
      }
      /**
       * <code>optional double reticle_difficulty_scale = 12;</code>
       */
      public Builder clearReticleDifficultyScale() {
        copyOnWrite();
        instance.clearReticleDifficultyScale();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.github.aeonlucid.pogoprotos.data.capture.CaptureProbability)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.github.aeonlucid.pogoprotos.data.Capture.CaptureProbability();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          pokeballType_.makeImmutable();
          captureProbability_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.github.aeonlucid.pogoprotos.data.Capture.CaptureProbability other = (com.github.aeonlucid.pogoprotos.data.Capture.CaptureProbability) arg1;
          pokeballType_= visitor.visitIntList(pokeballType_, other.pokeballType_);
          captureProbability_= visitor.visitFloatList(captureProbability_, other.captureProbability_);
          reticleDifficultyScale_ = visitor.visitDouble(reticleDifficultyScale_ != 0D, reticleDifficultyScale_,
              other.reticleDifficultyScale_ != 0D, other.reticleDifficultyScale_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  if (!pokeballType_.isModifiable()) {
                    pokeballType_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(pokeballType_);
                  }
                  pokeballType_.addInt(input.readEnum());
                  break;
                }
                case 10: {
                  if (!pokeballType_.isModifiable()) {
                    pokeballType_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(pokeballType_);
                  }
                  int length = input.readRawVarint32();
                  int oldLimit = input.pushLimit(length);
                  while(input.getBytesUntilLimit() > 0) {
                    pokeballType_.addInt(input.readEnum());
                  }
                  input.popLimit(oldLimit);
                  break;
                }
                case 21: {
                  if (!captureProbability_.isModifiable()) {
                    captureProbability_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(captureProbability_);
                  }
                  captureProbability_.addFloat(input.readFloat());
                  break;
                }
                case 18: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!captureProbability_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    final int currentSize = captureProbability_.size();
                    captureProbability_ = captureProbability_.mutableCopyWithCapacity(
                        currentSize + (length/4));
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    captureProbability_.addFloat(input.readFloat());
                  }
                  input.popLimit(limit);
                  break;
                }
                case 97: {

                  reticleDifficultyScale_ = input.readDouble();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.github.aeonlucid.pogoprotos.data.Capture.CaptureProbability.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:com.github.aeonlucid.pogoprotos.data.capture.CaptureProbability)
    private static final com.github.aeonlucid.pogoprotos.data.Capture.CaptureProbability DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new CaptureProbability();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureProbability getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<CaptureProbability> PARSER;

    public static com.google.protobuf.Parser<CaptureProbability> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CaptureAwardOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.github.aeonlucid.pogoprotos.data.capture.CaptureAward)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
     */
    java.util.List<com.github.aeonlucid.pogoprotos.Enums.ActivityType> getActivityTypeList();
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
     */
    int getActivityTypeCount();
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
     */
    com.github.aeonlucid.pogoprotos.Enums.ActivityType getActivityType(int index);
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
     */
    java.util.List<java.lang.Integer>
    getActivityTypeValueList();
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
     */
    int getActivityTypeValue(int index);

    /**
     * <code>repeated int32 xp = 2 [packed = true];</code>
     */
    java.util.List<java.lang.Integer> getXpList();
    /**
     * <code>repeated int32 xp = 2 [packed = true];</code>
     */
    int getXpCount();
    /**
     * <code>repeated int32 xp = 2 [packed = true];</code>
     */
    int getXp(int index);

    /**
     * <code>repeated int32 candy = 3 [packed = true];</code>
     */
    java.util.List<java.lang.Integer> getCandyList();
    /**
     * <code>repeated int32 candy = 3 [packed = true];</code>
     */
    int getCandyCount();
    /**
     * <code>repeated int32 candy = 3 [packed = true];</code>
     */
    int getCandy(int index);

    /**
     * <code>repeated int32 stardust = 4 [packed = true];</code>
     */
    java.util.List<java.lang.Integer> getStardustList();
    /**
     * <code>repeated int32 stardust = 4 [packed = true];</code>
     */
    int getStardustCount();
    /**
     * <code>repeated int32 stardust = 4 [packed = true];</code>
     */
    int getStardust(int index);
  }
  /**
   * Protobuf type {@code com.github.aeonlucid.pogoprotos.data.capture.CaptureAward}
   */
  public  static final class CaptureAward extends
      com.google.protobuf.GeneratedMessageLite<
          CaptureAward, CaptureAward.Builder> implements
      // @@protoc_insertion_point(message_implements:com.github.aeonlucid.pogoprotos.data.capture.CaptureAward)
      CaptureAwardOrBuilder {
    private CaptureAward() {
      activityType_ = emptyIntList();
      xp_ = emptyIntList();
      candy_ = emptyIntList();
      stardust_ = emptyIntList();
    }
    public static final int ACTIVITY_TYPE_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.IntList activityType_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, com.github.aeonlucid.pogoprotos.Enums.ActivityType> activityType_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, com.github.aeonlucid.pogoprotos.Enums.ActivityType>() {
              public com.github.aeonlucid.pogoprotos.Enums.ActivityType convert(java.lang.Integer from) {
                com.github.aeonlucid.pogoprotos.Enums.ActivityType result = com.github.aeonlucid.pogoprotos.Enums.ActivityType.forNumber(from);
                return result == null ? com.github.aeonlucid.pogoprotos.Enums.ActivityType.UNRECOGNIZED : result;
              }
            };
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
     */
    public java.util.List<com.github.aeonlucid.pogoprotos.Enums.ActivityType> getActivityTypeList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, com.github.aeonlucid.pogoprotos.Enums.ActivityType>(activityType_, activityType_converter_);
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
     */
    public int getActivityTypeCount() {
      return activityType_.size();
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
     */
    public com.github.aeonlucid.pogoprotos.Enums.ActivityType getActivityType(int index) {
      return activityType_converter_.convert(activityType_.getInt(index));
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
    getActivityTypeValueList() {
      return activityType_;
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
     */
    public int getActivityTypeValue(int index) {
      return activityType_.getInt(index);
    }
    private int activityTypeMemoizedSerializedSize;
    private void ensureActivityTypeIsMutable() {
      if (!activityType_.isModifiable()) {
        activityType_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(activityType_);
      }
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
     */
    private void setActivityType(
        int index, com.github.aeonlucid.pogoprotos.Enums.ActivityType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureActivityTypeIsMutable();
      activityType_.setInt(index, value.getNumber());
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
     */
    private void addActivityType(com.github.aeonlucid.pogoprotos.Enums.ActivityType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureActivityTypeIsMutable();
      activityType_.addInt(value.getNumber());
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
     */
    private void addAllActivityType(
        java.lang.Iterable<? extends com.github.aeonlucid.pogoprotos.Enums.ActivityType> values) {
      ensureActivityTypeIsMutable();
      for (com.github.aeonlucid.pogoprotos.Enums.ActivityType value : values) {
        activityType_.addInt(value.getNumber());
      }
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
     */
    private void clearActivityType() {
      activityType_ = emptyIntList();
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
     */
    private void setActivityTypeValue(
        int index, int value) {
      ensureActivityTypeIsMutable();
      activityType_.setInt(index, value);
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
     */
    private void addActivityTypeValue(int value) {
      ensureActivityTypeIsMutable();
      activityType_.addInt(value);
    }
    /**
     * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
     */
    private void addAllActivityTypeValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureActivityTypeIsMutable();
      for (int value : values) {
        activityType_.addInt(value);
      }
    }

    public static final int XP_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.IntList xp_;
    /**
     * <code>repeated int32 xp = 2 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
        getXpList() {
      return xp_;
    }
    /**
     * <code>repeated int32 xp = 2 [packed = true];</code>
     */
    public int getXpCount() {
      return xp_.size();
    }
    /**
     * <code>repeated int32 xp = 2 [packed = true];</code>
     */
    public int getXp(int index) {
      return xp_.getInt(index);
    }
    private int xpMemoizedSerializedSize = -1;
    private void ensureXpIsMutable() {
      if (!xp_.isModifiable()) {
        xp_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(xp_);
       }
    }
    /**
     * <code>repeated int32 xp = 2 [packed = true];</code>
     */
    private void setXp(
        int index, int value) {
      ensureXpIsMutable();
      xp_.setInt(index, value);
    }
    /**
     * <code>repeated int32 xp = 2 [packed = true];</code>
     */
    private void addXp(int value) {
      ensureXpIsMutable();
      xp_.addInt(value);
    }
    /**
     * <code>repeated int32 xp = 2 [packed = true];</code>
     */
    private void addAllXp(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureXpIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, xp_);
    }
    /**
     * <code>repeated int32 xp = 2 [packed = true];</code>
     */
    private void clearXp() {
      xp_ = emptyIntList();
    }

    public static final int CANDY_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.IntList candy_;
    /**
     * <code>repeated int32 candy = 3 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
        getCandyList() {
      return candy_;
    }
    /**
     * <code>repeated int32 candy = 3 [packed = true];</code>
     */
    public int getCandyCount() {
      return candy_.size();
    }
    /**
     * <code>repeated int32 candy = 3 [packed = true];</code>
     */
    public int getCandy(int index) {
      return candy_.getInt(index);
    }
    private int candyMemoizedSerializedSize = -1;
    private void ensureCandyIsMutable() {
      if (!candy_.isModifiable()) {
        candy_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(candy_);
       }
    }
    /**
     * <code>repeated int32 candy = 3 [packed = true];</code>
     */
    private void setCandy(
        int index, int value) {
      ensureCandyIsMutable();
      candy_.setInt(index, value);
    }
    /**
     * <code>repeated int32 candy = 3 [packed = true];</code>
     */
    private void addCandy(int value) {
      ensureCandyIsMutable();
      candy_.addInt(value);
    }
    /**
     * <code>repeated int32 candy = 3 [packed = true];</code>
     */
    private void addAllCandy(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureCandyIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, candy_);
    }
    /**
     * <code>repeated int32 candy = 3 [packed = true];</code>
     */
    private void clearCandy() {
      candy_ = emptyIntList();
    }

    public static final int STARDUST_FIELD_NUMBER = 4;
    private com.google.protobuf.Internal.IntList stardust_;
    /**
     * <code>repeated int32 stardust = 4 [packed = true];</code>
     */
    public java.util.List<java.lang.Integer>
        getStardustList() {
      return stardust_;
    }
    /**
     * <code>repeated int32 stardust = 4 [packed = true];</code>
     */
    public int getStardustCount() {
      return stardust_.size();
    }
    /**
     * <code>repeated int32 stardust = 4 [packed = true];</code>
     */
    public int getStardust(int index) {
      return stardust_.getInt(index);
    }
    private int stardustMemoizedSerializedSize = -1;
    private void ensureStardustIsMutable() {
      if (!stardust_.isModifiable()) {
        stardust_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(stardust_);
       }
    }
    /**
     * <code>repeated int32 stardust = 4 [packed = true];</code>
     */
    private void setStardust(
        int index, int value) {
      ensureStardustIsMutable();
      stardust_.setInt(index, value);
    }
    /**
     * <code>repeated int32 stardust = 4 [packed = true];</code>
     */
    private void addStardust(int value) {
      ensureStardustIsMutable();
      stardust_.addInt(value);
    }
    /**
     * <code>repeated int32 stardust = 4 [packed = true];</code>
     */
    private void addAllStardust(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureStardustIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, stardust_);
    }
    /**
     * <code>repeated int32 stardust = 4 [packed = true];</code>
     */
    private void clearStardust() {
      stardust_ = emptyIntList();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getActivityTypeList().size() > 0) {
        output.writeUInt32NoTag(10);
        output.writeUInt32NoTag(activityTypeMemoizedSerializedSize);
      }
      for (int i = 0; i < activityType_.size(); i++) {
        output.writeEnumNoTag(activityType_.getInt(i));
      }
      if (getXpList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(xpMemoizedSerializedSize);
      }
      for (int i = 0; i < xp_.size(); i++) {
        output.writeInt32NoTag(xp_.getInt(i));
      }
      if (getCandyList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(candyMemoizedSerializedSize);
      }
      for (int i = 0; i < candy_.size(); i++) {
        output.writeInt32NoTag(candy_.getInt(i));
      }
      if (getStardustList().size() > 0) {
        output.writeUInt32NoTag(34);
        output.writeUInt32NoTag(stardustMemoizedSerializedSize);
      }
      for (int i = 0; i < stardust_.size(); i++) {
        output.writeInt32NoTag(stardust_.getInt(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < activityType_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(activityType_.getInt(i));
        }
        size += dataSize;
        if (!getActivityTypeList().isEmpty()) {  size += 1;
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(dataSize);
        }activityTypeMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < xp_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(xp_.getInt(i));
        }
        size += dataSize;
        if (!getXpList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        xpMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < candy_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(candy_.getInt(i));
        }
        size += dataSize;
        if (!getCandyList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        candyMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < stardust_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(stardust_.getInt(i));
        }
        size += dataSize;
        if (!getStardustList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        stardustMemoizedSerializedSize = dataSize;
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureAward parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureAward parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureAward parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureAward parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureAward parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureAward parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureAward parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureAward parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureAward parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureAward parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.github.aeonlucid.pogoprotos.data.Capture.CaptureAward prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code com.github.aeonlucid.pogoprotos.data.capture.CaptureAward}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.github.aeonlucid.pogoprotos.data.Capture.CaptureAward, Builder> implements
        // @@protoc_insertion_point(builder_implements:com.github.aeonlucid.pogoprotos.data.capture.CaptureAward)
        com.github.aeonlucid.pogoprotos.data.Capture.CaptureAwardOrBuilder {
      // Construct using com.github.aeonlucid.pogoprotos.data.Capture.CaptureAward.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
       */
      public java.util.List<com.github.aeonlucid.pogoprotos.Enums.ActivityType> getActivityTypeList() {
        return instance.getActivityTypeList();
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
       */
      public int getActivityTypeCount() {
        return instance.getActivityTypeCount();
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
       */
      public com.github.aeonlucid.pogoprotos.Enums.ActivityType getActivityType(int index) {
        return instance.getActivityType(index);
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
       */
      public Builder setActivityType(
          int index, com.github.aeonlucid.pogoprotos.Enums.ActivityType value) {
        copyOnWrite();
        instance.setActivityType(index, value);
        return this;
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
       */
      public Builder addActivityType(com.github.aeonlucid.pogoprotos.Enums.ActivityType value) {
        copyOnWrite();
        instance.addActivityType(value);
        return this;
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
       */
      public Builder addAllActivityType(
          java.lang.Iterable<? extends com.github.aeonlucid.pogoprotos.Enums.ActivityType> values) {
        copyOnWrite();
        instance.addAllActivityType(values);  return this;
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
       */
      public Builder clearActivityType() {
        copyOnWrite();
        instance.clearActivityType();
        return this;
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
      getActivityTypeValueList() {
        return java.util.Collections.unmodifiableList(
            instance.getActivityTypeValueList());
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
       */
      public int getActivityTypeValue(int index) {
        return instance.getActivityTypeValue(index);
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
       */
      public Builder setActivityTypeValue(
          int index, int value) {
        copyOnWrite();
        instance.setActivityTypeValue(index, value);
        return this;
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
       */
      public Builder addActivityTypeValue(int value) {
        instance.addActivityTypeValue(value);
        return this;
      }
      /**
       * <code>repeated .com.github.aeonlucid.pogoprotos.enums.ActivityType activity_type = 1 [packed = true];</code>
       */
      public Builder addAllActivityTypeValue(
          java.lang.Iterable<java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllActivityTypeValue(values);
        return this;
      }

      /**
       * <code>repeated int32 xp = 2 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getXpList() {
        return java.util.Collections.unmodifiableList(
            instance.getXpList());
      }
      /**
       * <code>repeated int32 xp = 2 [packed = true];</code>
       */
      public int getXpCount() {
        return instance.getXpCount();
      }
      /**
       * <code>repeated int32 xp = 2 [packed = true];</code>
       */
      public int getXp(int index) {
        return instance.getXp(index);
      }
      /**
       * <code>repeated int32 xp = 2 [packed = true];</code>
       */
      public Builder setXp(
          int index, int value) {
        copyOnWrite();
        instance.setXp(index, value);
        return this;
      }
      /**
       * <code>repeated int32 xp = 2 [packed = true];</code>
       */
      public Builder addXp(int value) {
        copyOnWrite();
        instance.addXp(value);
        return this;
      }
      /**
       * <code>repeated int32 xp = 2 [packed = true];</code>
       */
      public Builder addAllXp(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllXp(values);
        return this;
      }
      /**
       * <code>repeated int32 xp = 2 [packed = true];</code>
       */
      public Builder clearXp() {
        copyOnWrite();
        instance.clearXp();
        return this;
      }

      /**
       * <code>repeated int32 candy = 3 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getCandyList() {
        return java.util.Collections.unmodifiableList(
            instance.getCandyList());
      }
      /**
       * <code>repeated int32 candy = 3 [packed = true];</code>
       */
      public int getCandyCount() {
        return instance.getCandyCount();
      }
      /**
       * <code>repeated int32 candy = 3 [packed = true];</code>
       */
      public int getCandy(int index) {
        return instance.getCandy(index);
      }
      /**
       * <code>repeated int32 candy = 3 [packed = true];</code>
       */
      public Builder setCandy(
          int index, int value) {
        copyOnWrite();
        instance.setCandy(index, value);
        return this;
      }
      /**
       * <code>repeated int32 candy = 3 [packed = true];</code>
       */
      public Builder addCandy(int value) {
        copyOnWrite();
        instance.addCandy(value);
        return this;
      }
      /**
       * <code>repeated int32 candy = 3 [packed = true];</code>
       */
      public Builder addAllCandy(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllCandy(values);
        return this;
      }
      /**
       * <code>repeated int32 candy = 3 [packed = true];</code>
       */
      public Builder clearCandy() {
        copyOnWrite();
        instance.clearCandy();
        return this;
      }

      /**
       * <code>repeated int32 stardust = 4 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getStardustList() {
        return java.util.Collections.unmodifiableList(
            instance.getStardustList());
      }
      /**
       * <code>repeated int32 stardust = 4 [packed = true];</code>
       */
      public int getStardustCount() {
        return instance.getStardustCount();
      }
      /**
       * <code>repeated int32 stardust = 4 [packed = true];</code>
       */
      public int getStardust(int index) {
        return instance.getStardust(index);
      }
      /**
       * <code>repeated int32 stardust = 4 [packed = true];</code>
       */
      public Builder setStardust(
          int index, int value) {
        copyOnWrite();
        instance.setStardust(index, value);
        return this;
      }
      /**
       * <code>repeated int32 stardust = 4 [packed = true];</code>
       */
      public Builder addStardust(int value) {
        copyOnWrite();
        instance.addStardust(value);
        return this;
      }
      /**
       * <code>repeated int32 stardust = 4 [packed = true];</code>
       */
      public Builder addAllStardust(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllStardust(values);
        return this;
      }
      /**
       * <code>repeated int32 stardust = 4 [packed = true];</code>
       */
      public Builder clearStardust() {
        copyOnWrite();
        instance.clearStardust();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.github.aeonlucid.pogoprotos.data.capture.CaptureAward)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.github.aeonlucid.pogoprotos.data.Capture.CaptureAward();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          activityType_.makeImmutable();
          xp_.makeImmutable();
          candy_.makeImmutable();
          stardust_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.github.aeonlucid.pogoprotos.data.Capture.CaptureAward other = (com.github.aeonlucid.pogoprotos.data.Capture.CaptureAward) arg1;
          activityType_= visitor.visitIntList(activityType_, other.activityType_);
          xp_= visitor.visitIntList(xp_, other.xp_);
          candy_= visitor.visitIntList(candy_, other.candy_);
          stardust_= visitor.visitIntList(stardust_, other.stardust_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  if (!activityType_.isModifiable()) {
                    activityType_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(activityType_);
                  }
                  activityType_.addInt(input.readEnum());
                  break;
                }
                case 10: {
                  if (!activityType_.isModifiable()) {
                    activityType_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(activityType_);
                  }
                  int length = input.readRawVarint32();
                  int oldLimit = input.pushLimit(length);
                  while(input.getBytesUntilLimit() > 0) {
                    activityType_.addInt(input.readEnum());
                  }
                  input.popLimit(oldLimit);
                  break;
                }
                case 16: {
                  if (!xp_.isModifiable()) {
                    xp_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(xp_);
                  }
                  xp_.addInt(input.readInt32());
                  break;
                }
                case 18: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!xp_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    xp_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(xp_);
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    xp_.addInt(input.readInt32());
                  }
                  input.popLimit(limit);
                  break;
                }
                case 24: {
                  if (!candy_.isModifiable()) {
                    candy_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(candy_);
                  }
                  candy_.addInt(input.readInt32());
                  break;
                }
                case 26: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!candy_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    candy_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(candy_);
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    candy_.addInt(input.readInt32());
                  }
                  input.popLimit(limit);
                  break;
                }
                case 32: {
                  if (!stardust_.isModifiable()) {
                    stardust_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(stardust_);
                  }
                  stardust_.addInt(input.readInt32());
                  break;
                }
                case 34: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!stardust_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    stardust_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(stardust_);
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    stardust_.addInt(input.readInt32());
                  }
                  input.popLimit(limit);
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.github.aeonlucid.pogoprotos.data.Capture.CaptureAward.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:com.github.aeonlucid.pogoprotos.data.capture.CaptureAward)
    private static final com.github.aeonlucid.pogoprotos.data.Capture.CaptureAward DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new CaptureAward();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.github.aeonlucid.pogoprotos.data.Capture.CaptureAward getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<CaptureAward> PARSER;

    public static com.google.protobuf.Parser<CaptureAward> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
